'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _md = require('crypto-js/md5');

var _md2 = _interopRequireDefault(_md);

var _cryptoJs = require('crypto-js');

var _cryptoJs2 = _interopRequireDefault(_cryptoJs);

var _getFolderSize = require('get-folder-size');

var _getFolderSize2 = _interopRequireDefault(_getFolderSize);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LocalStorage = function () {
  function LocalStorage(args /*path : String, secret : String, encrypt: Boolean = true, mkdir: Boolean = true*/) {
    _classCallCheck(this, LocalStorage);

    this.encryptFileName = true;
    this.encryptFileContent = true;

    this.cachePath = args.path;
    this.secretKey = args.key;
    if (args.encryptFileName === false) {
      this.encryptFileName = false;
    }
    if (args.encryptFileContent === false) {
      this.encryptFileContent = false;
    }
    if (args.mkdir) {
      _fs2.default.stat(args.path, function (err) {
        if (err) (0, _mkdirp2.default)(args.path, console.log);
      });
    }
  }

  _createClass(LocalStorage, [{
    key: 'write',
    value: function write(key, data, callback) {
      var path = this.getPath(key);
      _fs2.default.writeFile(path, this.encrypt(data), 'utf8', function (err) {
        if (err) {
          onError(err);
        } else {
          callback(data);
        }
      });
    }
  }, {
    key: 'writeSync',
    value: function writeSync(key, data) {
      try {
        _fs2.default.writeFileSync(this.getPath(key), this.encrypt(data), 'utf8');
      } catch (err) {
        onError(err);
      }
    }
  }, {
    key: 'read',
    value: function read(key, callback) {
      var _this = this;

      _fs2.default.readFile(this.getPath(key), 'utf8', function (err, data) {
        if (err) {
          onError(err);
        } else {
          callback(_this.decrypt(data));
        }
      });
    }
  }, {
    key: 'readSync',
    value: function readSync(key) {
      try {
        var data = _fs2.default.readFileSync(this.getPath(key), 'utf8');
        return this.decrypt(data);
      } catch (err) {
        onError(err);
      }
    }
  }, {
    key: 'exists',
    value: function exists(key) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _fs2.default.stat(_this2.getPath(key), function (err, stat) {
          if (!err) {
            resolve(stat);
          } else {
            reject(err);
          }
        });
      });
    }
  }, {
    key: 'existsThenRead',
    value: function existsThenRead(key) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        _this3.exists(key).then(function () {
          _this3.read(key, resolve);
        }).catch(reject);
      });
    }
  }, {
    key: 'isNotExpired',
    value: function isNotExpired(key) {
      var _this4 = this;

      var maxAge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 180;

      return new Promise(function (resolve, reject) {
        _this4.exists(key).then(function (stat) {
          var now = (0, _moment2.default)();
          var fileAge = (0, _moment2.default)(stat.mtime);

          if (now.diff(fileAge, 'minutes') <= maxAge) {
            resolve();
          } else {
            reject(new Error('File is x minutes too old'));
          }
        }).catch(reject);
      });
    }
  }, {
    key: 'isNotExpiredThenRead',
    value: function isNotExpiredThenRead(key, maxAge) {
      var _this5 = this;

      return new Promise(function (resolve, reject) {
        _this5.isNotExpired(key, maxAge).then(function () {
          _this5.read(key, resolve);
        }).catch(reject);
      });
    }
  }, {
    key: 'getPath',
    value: function getPath(key) {
      var cacheKey = this.encryptFileName ? (0, _md2.default)(key).toString() : key;
      return _path2.default.join(this.cachePath, cacheKey);
    }
  }, {
    key: 'purge',
    value: function purge(key, callback) {
      _fs2.default.unlink(this.getPath(key), function (err) {
        if (!err) {
          callback();
        } else {
          onError(err);
        }
      });
    }
  }, {
    key: 'purgeSync',
    value: function purgeSync(key) {
      try {
        return _fs2.default.unlinkSync(this.getPath(key));
      } catch (err) {
        onError(err);
      }
    }
  }, {
    key: 'trash',
    value: function trash(callback) {
      var _this6 = this;

      _fs2.default.readdir(this.cachePath, function (err, files) {
        if (!err) {
          files.forEach(function (file) {
            return _fs2.default.unlinkSync(_path2.default.join(_this6.cachePath, file));
          });
          callback();
        } else {
          onError(err);
        }
      });
    }
  }, {
    key: 'trashSync',
    value: function trashSync() {
      var _this7 = this;

      _fs2.default.readdir(this.cachePath, function (err, files) {
        if (!err) {
          files.forEach(function (file) {
            return _fs2.default.unlinkSync(_path2.default.join(_this7.cachePath, file));
          });
        } else {
          onError(err);
        }
      });
    }
  }, {
    key: 'getSize',
    value: function getSize(callback) {
      (0, _getFolderSize2.default)(this.cachePath, function (err, size) {
        if (!err) {
          callback((size / 1024 / 1024).toFixed(3));
        } else {
          onError(err);
        }
      });
    }
  }, {
    key: 'encrypt',
    value: function encrypt(data) {
      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
        data = JSON.stringify(data);
      }

      if (this.encryptFileContent) {
        var encData = _cryptoJs2.default.AES.encrypt(data, this.secretKey);

        return encData.toString();
      } else {
        return data;
      }
    }
  }, {
    key: 'decrypt',
    value: function decrypt(data) {
      if (this.encryptFileContent) {
        var decryptedBytes = _cryptoJs2.default.AES.decrypt(data.toString(), this.secretKey);
        var decryptedData = decBytes.toString(_cryptoJs2.default.enc.Utf8);

        return this.parse(decryptedData);
      } else {
        return this.parse(data);
      }
    }
  }, {
    key: 'parse',
    value: function parse(data) {
      return this.isJSON(data) ? JSON.parse(data) : data;
    }

    /**
     * @author <https://github.com/chriso/validator.js/blob/master/src/lib/isJSON.js>
     */

  }, {
    key: 'isJSON',
    value: function isJSON(data) {
      try {
        var obj = JSON.parse(data);
        return !!obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
      } catch (e) {/* ignore */}
      return false;
    }
  }]);

  return LocalStorage;
}();

exports.default = LocalStorage;


function onError(err) {
  throw new Error(err);
}
module.exports = exports['default'];